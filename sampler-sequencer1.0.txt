import sounddevice as sd
import soundfile as sf
import numpy as np
import time
import os

# Define the folder path where your audio samples are located
folder_path = r'C:\Users\gerar\Desktop\Music Software DIY\ExampleSample'

# Load the audio samples
samples = []
for file_name in os.listdir(folder_path):
    if file_name.endswith(".wav"):
        file_path = os.path.join(folder_path, file_name)
        data, sample_rate = sf.read(file_path)
        samples.append(data)

# Set the tempo and number of bars
tempo = 120  # beats per minute
bars = 4

# Calculate the duration of a single bar in seconds
bar_duration = 60.0 / tempo

# Define the sequence of sample indices, pitch shifts, and speed factors for each bar
sequence = [
    # Format: (sample_index, pitch_shift, speed_factor)
    (0, 0, 1.0),  # Sample 0, no pitch shift, normal speed
    (1, 2, 1.2),  # Sample 1, 2 semitones pitch shift, 1.2 times faster speed
    (0, -1, 0.8),  # Sample 0, 1 semitone down pitch shift, 0.8 times slower speed
    (2, 1, 1.5),  # Sample 2, 1 semitone up pitch shift, 1.5 times faster speed
    (1, -3, 0.9),  # Sample 1, 3 semitones down pitch shift, 0.9 times slower speed
    (0, 2, 0.7),  # Sample 0, 2 semitones up pitch shift, 0.7 times slower speed
    (2, -2, 1.3),  # Sample 2, 2 semitones down pitch shift, 1.3 times faster speed
    (1, 1, 1.0),  # Sample 1, 1 semitone up pitch shift, normal speed
]

# Initialize the start time
start_time = time.time()

# Run the sequencer loop
while True:
    # Calculate the elapsed time in seconds
    elapsed_time = time.time() - start_time

    # Calculate the current bar index
    current_bar = int(elapsed_time / bar_duration) % bars

    # Get the current sequence entry for the current bar
    current_entry = sequence[current_bar]

    # Extract the sample index, pitch shift, and speed factor
    sample_index, pitch_shift, speed_factor = current_entry

    # Get the current audio sample
    sample = samples[sample_index]

    # Resample the audio sample based on the speed factor
    resampled_sample = np.interp(
        np.arange(0, len(sample), speed_factor),
        np.arange(0, len(sample)),
        sample
    )

    # Apply the pitch shift to the resampled sample
    pitch_shifted_sample = np.roll(resampled_sample, pitch_shift)

    # Play the audio sample
    sd.play(pitch_shifted_sample, samplerate=sample_rate, blocking=False)

    # Calculate the time to sleep until the next beat
    sleep_time = bar_duration - (elapsed_time % bar_duration)

    # Sleep until the next beat
    time.sleep(sleep_time)
